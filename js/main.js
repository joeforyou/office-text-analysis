// Generated by CoffeeScript 1.8.0
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  var mainCharacters = ["Michael", "Dwight", "Jim","Pam","Andy","Ryan","Kevin","Meredith","Angela","Oscar","Phyllis","Kelly","Toby","Stanley","Creed"]
  
  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      // season group
      this.hide_seasons = __bind(this.hide_seasons, this);
      this.display_seasons = __bind(this.display_seasons, this);
      this.move_towards_season = __bind(this.move_towards_season, this);
      this.display_by_season = __bind(this.display_by_season, this);
      // character group
      this.display_by_character = __bind(this.display_by_character, this);
      this.move_towards_character = __bind(this.move_towards_character, this);
      this.hide_characters = __bind(this.hide_characters, this);
      this.display_characters = __bind(this.display_characters, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      var max_val;
      this.data = data;
      this.width = 500;
      this.height = 500;      
      this.tooltip = CustomTooltip("office_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.season_centers = {
        "1": {
          x: this.width / 3,
          y: this.height / 3
        },
        "2": {
          x: this.width / 2,
          y: this.height / 3
        },
        "3": {
          x: 2 * this.width / 3,
          y: this.height / 3
        },
        "4": {
          x: this.width / 3,
          y: this.height / 2
        },
        "5": {
          x: this.width / 2,
          y: this.height / 2
        },
        "6": {
          x: 2 * this.width / 3,
          y: this.height / 2
        },
        "7": {
          x: this.width / 3,
          y: this.height / 1.5
        },
        "8": {
          x: this.width / 2,
          y: this.height / 1.5
        },
        "9": {
          x: 2 * this.width / 3,
          y: this.height / 1.5
        }
      };
      this.character_centers = {
          "Michael" : {
            x: this.width / 3,
            y: this.height / 3
          },
          "Dwight" : {
            x: this.width / 2,
            y: this.height / 3
          },
          "Jim" : {
            x: this.width - this.width / 3,
            y: this.height / 3  
          },
          "Pam" : {
            x: this.width / 3,
            y: this.height / 2
          },
          "Andy" : {
            x: this.width / 2,
            y: this.height / 2
          },
          "Ryan" : {
            x: this.width - this.width / 3,
            y: this.height / 2
          },
          "Kevin" : {
            x: this.width - this.width / 3,
            y: this.height / 1.5
          }, 
          "Meredith": {
            x: this.width / 3,
            y: this.height / 1.5
          },
          "Angela": {
            x: this.width / 2,
            y: this.height / 1.5
          },
          "Oscar": {
            x: 2 * this.width / 5,
            y: this.height / 1.5
          },
          "Phyllis": {
            x: this.width / 4,
            y: this.height / 1.25
          },
          "Kelly": {
            x: this.width / 3,
            y: this.height / 1.25
          },
          "Toby": {
            x: this.width / 2,
            y: this.height / 1.25
          },
          "Stanley" : {
            x: this.width - this.width / 3,
            y: this.height / 1.25
          },
          "Creed": {
            x: this.width - this.width / 4,
            y: this.height / 1.25
          },
      }
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(mainCharacters).range(d3.scale.category20().range());
      max_val = d3.max(this.data, function(d) {
        return parseInt(d.count);
      });
      this.radius_scale = d3.scale.pow().exponent(0.8).domain([0, max_val]).range([2, 45]);
      this.create_nodes();
      this.create_vis();
      this.legend = DisplayLegend(mainCharacters);
    }

    BubbleChart.prototype.create_nodes = function() {
      this.data.forEach((function(_this) {
        return function(d) {
          var node;
          node = {
            id: d.id,
            radius: _this.radius_scale(parseInt(d.count)),
            value: d.count,
            speaker: d.speaker,
            season: d.season,
            x: Math.random() * 900,
            y: Math.random() * 800
          };
          return _this.nodes.push(node);
        };
      })(this));
      return this.nodes.sort(function(a, b) {
        return b.count - a.count;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });

      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", (function(_this) {
        return function(d) {
          return _this.fill_color(d.speaker);
        };
      })(this)).attr("stroke-width", 2).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.speaker)).darker();
        };
      })(this)).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      }).on("click", function(d, i) {
        console.log("click event", d, i)
        // jump to character details
        if(mainCharacters.includes(d.speaker)){
          $("#info-panel").hide();
          $("#reset").show();
          $("#what-she-said").show();
          ShowTextDetails(d);
        }
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_characters();
      return this.hide_seasons();
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_season = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_season(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_characters();
      return this.display_seasons();
    };

    BubbleChart.prototype.display_by_character = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_character(e.alpha)).attr("cx", function(d) {
              return d.x;
          }).attr("cy", function(d) {
              return d.y;
          });
        };
      })(this))
      this.force.start();
      this.hide_seasons();
      return this.display_characters();
    };

    BubbleChart.prototype.move_towards_season = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.season_centers[d.season];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.move_towards_character = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.character_centers[d.speaker];
          if(target) {
            d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
            return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
          } else {
            //
          }
        };
      })(this);
    };

    BubbleChart.prototype.display_seasons = function() {
      var seasons, seasons_data, seasons_xy;
      seasons_xy = {
        "Season 1": [this.season_centers["1"].x - 80, this.season_centers["1"].y],
        "Season 2": [this.season_centers["2"].x - 20, this.season_centers["2"].y],
        "Season 3": [this.season_centers["3"].x + 80, this.season_centers["3"].y],
        "Season 4": [this.season_centers["4"].x - 80, this.season_centers["4"].y + 80],
        "Season 5": [this.season_centers["5"].x - 20, this.season_centers["5"].y + 80],
        "Season 6": [this.season_centers["6"].x + 80, this.season_centers["6"].y + 80],
        "Season 7": [this.season_centers["7"].x - 80, this.season_centers["7"].y + 150],
        "Season 8": [this.season_centers["8"].x - 20, this.season_centers["8"].y + 150],
        "Season 9": [this.season_centers["9"].x + 80, this.season_centers["9"].y + 150],
      };
      seasons_data = d3.keys(seasons_xy);
      seasons = this.vis.selectAll(".seasons").data(seasons_data);
      return seasons.enter().append("text").attr("class", "seasons").attr("x", (function(_this) {
        return function(d) {
          return seasons_xy[d][0];
        };
      })(this)).attr("y", (function(_this){
        return function(d) {
          return seasons_xy[d][1];
        };
      })(this)).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.display_characters = function() {
        var characters, characters_data, characters_xy;
        characters_xy = {
            "Michael": [this.character_centers["Michael"].x - 40, this.character_centers["Michael"].y - 120],
            "Dwight": [this.character_centers["Dwight"].x, this.character_centers["Dwight"].y - 120],
            "Jim": [this.character_centers["Jim"].x + 40, this.character_centers["Jim"].y - 120],
            "Pam": [this.character_centers["Pam"].x - 40, this.character_centers["Pam"].y],
            "Andy": [this.character_centers["Andy"].x, this.character_centers["Andy"].y],
            "Ryan": [this.character_centers["Ryan"].x + 40, this.character_centers["Ryan"].y],
            "Kevin": [this.character_centers["Kevin"].x + 40, this.character_centers["Kevin"].y + 40],
            "Meredith": [this.character_centers["Meredith"].x - 40, this.character_centers["Meredith"].y + 40],
            "Angela" : [this.character_centers["Angela"].x + 20, this.character_centers["Angela"].y + 40],
            "Oscar" : [this.character_centers["Oscar"].x, this.character_centers["Oscar"].y + 40],
            "Phyllis" : [this.character_centers["Phyllis"].x - 40, this.character_centers["Phyllis"].y + 50],
            "Kelly" : [this.character_centers["Kelly"].x - 20, this.character_centers["Kelly"].y + 50],
            "Toby" : [this.character_centers["Toby"].x, this.character_centers["Toby"].y + 50],
            "Stanley": [this.character_centers["Stanley"].x + 20, this.character_centers["Stanley"].y + 50],
            "Creed" : [this.character_centers["Creed"].x + 40, this.character_centers["Creed"].y + 50]
          };
        characters_data = d3.keys(characters_xy);
        characters = this.vis.selectAll(".characters").data(characters_data);
        return characters.enter().append("text").attr("class", "characters").attr("x", (function(_this) {
          return function(d) {
            
            return characters_xy[d][0];
          };
        })(this)).attr("y", (function(_this){
          return function(d) {
            return characters_xy[d][1];
          };
        })(this)).attr("text-anchor", "middle").text(function(d) {
          return d;
        });
      };

    BubbleChart.prototype.hide_seasons = function() {
      var seasons;
      return seasons = this.vis.selectAll(".seasons").remove();
    };

    BubbleChart.prototype.hide_characters = function() {
      var characters;
      return characters = this.vis.selectAll(".characters").remove();
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">Speaker:</span><span class=\"value\"> " + data.speaker + "</span><br/>";
      content += "<span class=\"name\">Number of lines:</span><span class=\"value\"> " + (addCommas(data.value)) + "</span><br/>";
      content += "<span class=\"name\">Season:</span><span class=\"value\"> " + data.season + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      d3.select(element).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.speaker)).darker();
        };
      })(this));
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_all();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.display_season = (function(_this) {
      return function() {
        return chart.display_by_season();
      };
    })(this);
    root.display_character = (function(_this) {
        return function() {
          return chart.display_by_character();
        };
      })(this);
    root.toggle_view = (function(_this) {
      return function(view_type) {
        if (view_type === 'season') {
          $(".legend").hide();
          $("#reset").show();
          return root.display_season();
        } 
        else if (view_type === 'character') {
          $(".legend").hide();
          $("#reset").show();
          return root.display_character();
        } else {
          $(".legend").show();
          return root.display_all();
        }
      };
    })(this);
    return d3.csv("data/the-office-counts-by-season.csv", render_vis);
  });

}).call(this);
